"We need to enhance the search results in our Salesforce Data Dictionary NLQ application. The goal is to introduce a 'Match Confidence' score (High, Medium, Low) for each search result, determined by an LLM. This score will be displayed as a pill in a new first column in the results table, and the table will be sorted by this confidence level (High > Medium > Low).

Please implement the following changes across the specified files:

**Phase 1: Backend Modifications (Scoring Logic & Data Structure)**

1.  **Update Shared Schema (`shared/schema.ts`):**
    *   **Task:** Add a `matchConfidence` field to the `SalesforceField` type (and consequently `SearchResult` if it inherits or is similar).
    *   **Details:**
        *   The field should be `matchConfidence?: "High" | "Medium" | "Low" | null;` (optional, can be one of the three strings or null).
        *   Ensure `searchResultSchema` also reflects this new field.

2.  **Modify NLQ Service (`server/nlq.ts`):**
    *   **Task:** Update the `refineSearchResultsWithLLM` function (or create a new helper called by it) to assign a `matchConfidence` score to each of the `initialResults` it processes (up to `maxResultsToRefine`).
    *   **Guidelines:**
        *   For each `field` in `initialResults` (up to `maxResultsToRefine`):
            *   Construct a new LLM prompt to determine match confidence.
            *   **LLM Prompt for Confidence Scoring (per field):**
                ```
                Context: You are an AI assistant evaluating the relevance of a Salesforce field to a user's query and the derived search plan.
                Original User Query: "{originalQuery}"
                Derived Search Plan: {JSON.stringify(searchPlan)} 
                Current Field Details:
                  - Label: "{field.fieldLabel}"
                  - API Name: "{field.fieldApiName}"
                  - Object: "{field.objectLabel}"
                  - Data Type: "{field.dataType}"
                  - Description: "{field.description || 'N/A'}"
                  - Help Text: "{field.helpText || 'N/A'}"
                  - Tags: "{field.tagIds || 'N/A'}" 
                  - Formula: {field.formula ? "Yes" : "No"}

                Task: Based on the Original User Query, the Derived Search Plan, and the Current Field Details, assess how well this specific field matches the user's likely intent.
                Return ONLY one of the following confidence scores as a single word: "High", "Medium", or "Low".

                Guidelines for Scoring:
                - "High": Strong, direct match. Keywords from the query/plan appear in critical field attributes (Label, API Name, specific Tags). The field's object and type are highly relevant. The description clearly aligns with the query's intent. For example, if the query is about 'customer revenue on opportunities', a field named 'Opportunity.Amount' would be High.
                - "Medium": Good partial or conceptual match. Some keywords match, or keywords match in less critical attributes (Description, Help Text). The object or type might be generally relevant but not a perfect fit. The field seems related but might not be the primary answer. For example, for 'customer revenue on opportunities', a field 'Account.AnnualRevenue' might be Medium if Opportunity context is primary.
                - "Low": Weak or indirect match. Few or no keywords match directly. The field's purpose seems tangential. It might be a very broad match or related only by a common object without specific keyword relevance. For example, for 'customer revenue on opportunities', a field 'Opportunity.CloseDate' would be Low.

                Output Example:
                High
                ```
            *   Make the call to your LLM (e.g., `openai.chat.completions.create` with model `gpt-4o` or similar).
            *   Parse the LLM's response (which should be "High", "Medium", or "Low").
            *   Add the `matchConfidence` property to the `field` object. If the LLM call fails or returns an invalid value, set `matchConfidence` to `null` or a default like "Medium".
        *   The `refineSearchResultsWithLLM` function should now return `Promise<Array<SalesforceField & { matchConfidence?: "High" | "Medium" | "Low" | null }>>`.
        *   **Important:** The existing scoring logic within `refineSearchResultsWithLLM` can be removed or simplified, as the LLM's confidence score will now be the primary driver for relevance. However, the final sorting should happen on the frontend after *all* fields processed by `refineSearchResultsWithLLM` have their confidence scores. The backend should just return the fields with their scores.

3.  **Update API Route (`server/routes.ts`):**
    *   **Task:** Ensure the `/api/search` endpoint includes the `matchConfidence` field for each result item in the JSON response.
    *   **Details:** The `refinedResults` array passed to `res.json` should now contain objects with the `matchConfidence` property.

**Phase 2: Frontend Modifications (Display & Sorting)**

1.  **Update Search Results Component (`client/src/components/search-results.tsx`):**
    *   **Task:** Modify the table to display the 'Match Confidence' and sort results.
    *   **Guidelines:**
        *   **New Column:** Add a new table header (`<th>`) as the *first* column: "Match Confidence".
        *   **Display Pill:** In each table row (`<tr>`), add a new `<td>` as the *first* cell.
            *   Inside this `<td>`, display the `field.matchConfidence` using the `Badge` component (`@/components/ui/badge`).
            *   Style the badge based on confidence:
                *   High: Greenish (e.g., `bg-green-100 text-green-800 border-green-300`)
                *   Medium: Yellowish/Orangish (e.g., `bg-yellow-100 text-yellow-800 border-yellow-300`)
                *   Low: Grayish/Reddish (e.g., `bg-red-100 text-red-800 border-red-300` or `bg-slate-100 text-slate-700 border-slate-300`)
                *   If `matchConfidence` is null or undefined, display "-" or leave blank.
                *   You might want to add a helper function in `client/src/lib/utils.ts` like `getConfidenceBadgeClass(confidence: string | null | undefined): string` to return the appropriate Tailwind classes.
        *   **Sorting Logic:**
            *   Before mapping `results` to `<tr>` elements, sort the `results` array.
            *   Define a sort order: High > Medium > Low. Items with no confidence score (null/undefined) should appear last.
            *   Example sort function:
                ```javascript
                const confidenceOrder = { High: 1, Medium: 2, Low: 3 };
                const sortedResults = [...results].sort((a, b) => {
                  const confidenceA = a.matchConfidence || 'Low'; // Default to Low if undefined for sorting
                  const confidenceB = b.matchConfidence || 'Low';
                  const orderA = confidenceOrder[confidenceA] || 4; // 4 for null/undefined
                  const orderB = confidenceOrder[confidenceB] || 4;
                
                  if (orderA !== orderB) {
                    return orderA - orderB;
                  }
                  // Optional: Add secondary sort criteria if confidence is the same
                  // e.g., by fieldLabel
                  // return a.fieldLabel.localeCompare(b.fieldLabel);
                  return 0;
                });
                // Then map over sortedResults
                ```
            *   Ensure the `SearchResult` type used in this component includes `matchConfidence`.

2.  **(Optional) Update Utility Functions (`client/src/lib/utils.ts`):**
    *   **Task:** Create a helper function to get badge styling for confidence levels.
    *   **Example `getConfidenceBadgeClass`:**
        ```typescript
        export function getConfidenceBadgeClass(confidence: string | null | undefined): string {
          switch (confidence) {
            case 'High':
              return 'bg-green-100 text-green-800 border border-green-300';
            case 'Medium':
              return 'bg-yellow-100 text-yellow-800 border border-yellow-300';
            case 'Low':
              return 'bg-red-100 text-red-800 border border-red-300'; // Or a more neutral 'bg-slate-100 text-slate-700 border-slate-300'
            default:
              return 'bg-slate-100 text-slate-500 border-slate-300';
          }
        }
        ```
    *   Use this function in `SearchResults.tsx` for the badge's `className`.

3.  **Update Home Page State/Type (`client/src/pages/home.tsx`):**
    *   **Task:** Ensure the `searchResults` state and its type `SearchResult` correctly include the new `matchConfidence` field from the API response. This should be automatic if you're using the shared schema types correctly.

**Constraints & Considerations:**

*   **LLM Latency:** Adding an LLM call for each result in `refineSearchResultsWithLLM` will increase the response time of the `/api/search` endpoint. Process only a limited number of top initial results (e.g., `maxResultsToRefine`).
*   **LLM Cost:** Be mindful of the number of LLM calls.
*   **Error Handling:** Gracefully handle cases where the LLM fails to provide a confidence score (e.g., default to 'Medium' or null, and log the error).
*   **API Key:** Ensure your `OPENAI_API_KEY` is correctly configured in the environment.
*   **Clarity of Confidence:** The LLM prompt for confidence scoring is crucial. It needs to clearly understand how to differentiate between High, Medium, and Low based on the provided context.

Start with the backend changes in `shared/schema.ts` and `server/nlq.ts`, then `server/routes.ts`. Once the API returns the `matchConfidence`, proceed to update the frontend components.
Place crucial instructions for the AI (like the LLM prompt for confidence scoring) at the beginning or end of relevant sections.
Iterate if the first attempt isn't perfect. Good luck!"
